<?php
namespace pl\tomaszrup;

require_once 'SimpleType.class.php';

/**
 *
 * @author Tomasz Jakub Rup
 */
interface StringType extends \ArrayAccess, \Iterator, SimpleType {
    /**
     *
     * @param string $string
     * @return String
     */
    public function concat($string);

    /**
     *
     * @param integer $start
     * @param intger $length
     * @return String
     */
    public function substr($start, $length='');

    /**
     * Strip whitespace (or other characters) from the beginning and end of a string
     * @link http://php.net/manual/en/function.trim.php
     * @param string $charlist[optional] <p>
     * Optionally, the stripped characters can also be specified using
     * the charlist parameter.
     * Simply list all characters that you want to be stripped. With
     * .. you can specify a range of characters.
     * </p>
     * @return String
     */
    public function trim($charlist = null);

    /**
     *
     * @return String
     */
    public function ltrim($charlist = null);

    /**
     *
     * @return String
     */
    public function rtrim($charlist = null);

    /**
     * Make a string lowercase
     * @link http://php.net/manual/en/function.strtolower.php
     * @return String
     */
    public function lower();

    /**
     * Make a string uppercase
     * @link http://php.net/manual/en/function.strtoupper.php
     * @return String
     */
    public function upper();

    /**
     * Replace all occurrences of the search string with the replacement string
     * @link http://php.net/manual/en/function.str-replace.php
     * @param mixed $search <p>
     * </p>
     * @param mixed $replace <p>
     * </p>
     * @param bool $case[optional]
     */
    public function replace($search, $replace, $case=false);

    /**
     * Get string length
     * @link http://php.net/manual/en/function.strlen.php
     * @return int The length of the string on success,
     * and 0 if the string is empty.
     */
    public function length();

    /**
     * Calculates the crc32 polynomial of a string
     * @link http://php.net/manual/en/function.crc32.php
     * @return integer
     */
    public function crc32();

    /**
     * One-way string encryption (hashing)
     * @link http://php.net/manual/en/function.crypt.php
     * @param string salt[optional] <p>
     * An optional salt string to base the encryption on. If not provided,
     * one will be randomly generated by PHP each time you call this function.
     * </p>
     * <p>
     * If you are using the supplied salt, you should be aware that the salt
     * is generated once. If you are calling this function repeatedly, this
     * may impact both appearance and security.
     * </p>
     * @return String
     */
    public function crypt();

    /**
     * Calculate the md5 hash of a string
     * @link http://php.net/manual/en/function.md5.php
     * @param bool $raw_output[optional] <p>
     * If the optional raw_output is set to true,
     * then the md5 digest is instead returned in raw binary format with a
     * length of 16. Defaults to false.
     * </p>
     * @return String
     */
    public function md5($raw_output = false);

    /**
     * Perform the rot13 transform on a string
     * @link http://php.net/manual/en/function.str-rot13.php
     * @return String
     */
    public function rot13();

    /**
     * Calculate the sha1 hash of a string
     * @link http://php.net/manual/en/function.sha1.php
     * @param bool $raw_output[optional] <p>
     * If the optional raw_output is set to true,
     * then the sha1 digest is instead returned in raw binary format with a
     * length of 20, otherwise the returned value is a 40-character
     * hexadecimal number. Defaults to false.
     * </p>
     * @return String
     */
    public function sha1($raw_output = false);
}
